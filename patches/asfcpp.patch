--- asf-strategy.cpp	2017-10-12 13:56:31.233358000 -0400
+++ new.cpp	2017-10-12 13:53:08.441354668 -0400
@@ -1,6 +1,6 @@
 /* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
-/*
- * Copyright (c) 2014-2017,  Regents of the University of California,
+/**
+ * Copyright (c) 2014-2016,  Regents of the University of California,
  *                           Arizona Board of Regents,
  *                           Colorado State University,
  *                           University Pierre & Marie Curie, Sorbonne University,
@@ -33,53 +33,211 @@
 namespace asf {
 
 NFD_LOG_INIT("AsfStrategy");
-NFD_REGISTER_STRATEGY(AsfStrategy);
 
+const Name AsfStrategy::STRATEGY_NAME("ndn:/localhost/nfd/strategy/asf/%FD%01");
 const time::milliseconds AsfStrategy::RETX_SUPPRESSION_INITIAL(10);
 const time::milliseconds AsfStrategy::RETX_SUPPRESSION_MAX(250);
 
+NFD_REGISTER_STRATEGY(AsfStrategy);
+
 AsfStrategy::AsfStrategy(Forwarder& forwarder, const Name& name)
-  : Strategy(forwarder)
+  : Strategy(forwarder, name)
   , m_measurements(getMeasurements())
   , m_probing(m_measurements)
+  , m_forwarder(forwarder)
   , m_retxSuppression(RETX_SUPPRESSION_INITIAL,
                       RetxSuppressionExponential::DEFAULT_MULTIPLIER,
                       RETX_SUPPRESSION_MAX)
 {
-  ParsedInstanceName parsed = parseInstanceName(name);
-  if (!parsed.parameters.empty()) {
-    BOOST_THROW_EXCEPTION(std::invalid_argument("AsfStrategy does not accept parameters"));
-  }
-  if (parsed.version && *parsed.version != getStrategyName()[-1].toVersion()) {
-    BOOST_THROW_EXCEPTION(std::invalid_argument(
-      "AsfStrategy does not support version " + std::to_string(*parsed.version)));
-  }
-  this->setInstanceName(makeInstanceName(name, getStrategyName()));
 }
 
-const Name&
-AsfStrategy::getStrategyName()
-{
-  static Name strategyName("/localhost/nfd/strategy/asf/%FD%02");
-  return strategyName;
+
+void
+AsfStrategy::notfound(const Face& inFace, const shared_ptr<pit::Entry>& pitEntry, const Interest& interest){           
+	// notfound simply stays put
+	NFD_LOG_DEBUG("Cs lookup negative, procees to forwarding based on S or M");
+	int k = (-1)*interest.getName().size();    
+	const ndn::Name name = GetLookupName(interest);              
+	// if it's a multipath interest check               
+	if (interest.getName().at(k+1).toUri()=="S"){
+		S_ForwardIt(inFace, interest, pitEntry, name);
+	}else{
+		M_ForwardIt(inFace, interest, pitEntry, name);
+	}
 }
 
 void
+AsfStrategy::found(const Face& inFace, const shared_ptr<pit::Entry>& pitEntry, const Interest& interest, const Data& data){
+
+	NFD_LOG_DEBUG("Traced name is cached");
+
+	lp::NackHeader nackHeader;
+	nackHeader.setReason(lp::NackReason::CACHE_LOCAL);
+
+	this->sendNack(pitEntry, inFace, nackHeader);
+	this->rejectPendingInterest(pitEntry);          
+}
+
+void 
+AsfStrategy::Cache_check(const Face& inFace, const shared_ptr<pit::Entry>& pitEntry, const ndn::Name name){
+	// P2 = c
+	NFD_LOG_DEBUG("Checking the content store ");                    
+	// Access to the Forwarder's FIB
+	const Cs& cs = m_forwarder.getCs();                    
+	//Cs lookup with name                    
+	NFD_LOG_DEBUG("Creating a fake interest for the cs_lookup");                        
+	ndn::Interest fi;
+	fi.setName(name);
+	fi.setInterestLifetime(ndn::time::milliseconds(10000));                    
+	cs.find(fi, bind(&AsfStrategy::found, this, ref(inFace), pitEntry, _1, _2),
+			bind(&AsfStrategy::notfound, this, ref(inFace), pitEntry, _1));  
+}   
+
+
+void
+AsfStrategy::M_ForwardIt(const Face& inFace, const Interest& interest, const shared_ptr<pit::Entry>& pitEntry, const ndn::Name name){
+	const Fib& fib = m_forwarder.getFib();                    
+	// FIB lookup with name
+	const fib::Entry& fibEntry = fib.findLongestPrefixMatch(name);                                       
+	// Getting faces for nexthops??
+	std::string face_id = interest.getName().at(-1).toUri(); // Regular multipath request >> has face_id in the end
+	const fib::NextHopList& nexthops = fibEntry.getNextHops();                    
+	for (fib::NextHopList::const_iterator it = nexthops.begin(); it != nexthops.end(); ++it) {                        
+		if(it->getFace().getId()==std::stoi(face_id)){                            
+			if((it->getFace().getScope()== ndn::nfd::FACE_SCOPE_LOCAL)){                             
+				lp::NackHeader nackHeader;
+				nackHeader.setReason(lp::NackReason::PRODUCER_LOCAL);                                                            
+				this->sendNack(pitEntry, inFace, nackHeader);
+				this->rejectPendingInterest(pitEntry);
+				return;                                
+			}else{                                
+				this->sendInterest(pitEntry, it->getFace(), interest);
+				return;
+			}
+		}
+	}                                        
+	return;	
+}
+void       
+AsfStrategy::multi_process(const Face& inFace, const Interest& interest, const shared_ptr<pit::Entry>& pitEntry){
+	NFD_LOG_DEBUG("Received a multipath interest");                    
+	//Constructing name                    
+	int i;
+	int k = (-1)*interest.getName().size();  
+	const ndn::Name c = interest.getName().at(k+3).toUri();
+	const ndn::Name n = c.toUri();                    
+	// actual multipath
+	std::string face_id = interest.getName().at(-1).toUri(); // Regular multipath request >> has face_id in the end
+	ndn::Name v = n.toUri();                    
+	for(i=k+4; i< -2; i++){                        
+		v = v.toUri() + "/" + interest.getName().at(i).toUri();                        
+	}                
+
+	const ndn::Name name = v.toUri();                                                          
+	if (interest.getName().at(k+2).toUri()== "c"){                    
+		Cache_check(inFace, pitEntry, name);               
+	}else{
+		M_ForwardIt(inFace, interest, pitEntry, name);
+	} 
+
+}
+
+void
+AsfStrategy::S_ForwardIt(const Face& inFace, const Interest& interest, const shared_ptr<pit::Entry>& pitEntry, const ndn::Name name){
+
+	// Access to the Forwarder's FIB
+	const Fib& fib = m_forwarder.getFib();                    
+	// FIB lookup with name
+	const fib::Entry& fibEntry = fib.findLongestPrefixMatch(name);                                    
+	// Getting faces for nexthops??
+	const fib::NextHopList& nexthops = fibEntry.getNextHops();
+
+          if (nexthops.size() == 0) {
+            sendNoRouteNack(inFace, interest, pitEntry);
+            this->rejectPendingInterest(pitEntry);
+            return;
+          }
+
+          Face* faceToUse = getBestFaceForForwarding(fibEntry, interest, inFace);
+
+          if (faceToUse == nullptr) {
+            sendNoRouteNack(inFace, interest, pitEntry);
+            this->rejectPendingInterest(pitEntry);
+            return;
+          }
+
+          NFD_LOG_TRACE("Forwarding interest to face: " << faceToUse->getId());
+          forwardInterest(interest, fibEntry, pitEntry, *faceToUse);
+}
+
+const ndn::Name
+AsfStrategy::GetLookupName(const Interest& interest){                 
+	int i;
+	int k = (-1)*interest.getName().size();
+	const ndn::Name c = interest.getName().at(k+3).toUri();
+	const ndn::Name n = c.toUri() ;                    
+	//const ndn::Name x = n.toUri() + c.toUri
+	ndn::Name v = n.toUri();                   
+	for(i=k+4; i< -1; i++){
+		v = v.toUri() + "/" + interest.getName().at(i).toUri();
+	}                                 
+	return v.toUri(); 		            
+}
+
+void
+AsfStrategy::single_process(const Face& inFace, const Interest& interest, const shared_ptr<pit::Entry>& pitEntry) {        	                  
+	NFD_LOG_DEBUG("**************Single path option****************");                   
+	// Extract name from interest   
+	const ndn::Name name = GetLookupName(interest);   
+	int k = (-1)*interest.getName().size();                                                         
+	if (interest.getName().at(k+2).toUri()== "c"){                    
+		Cache_check(inFace, pitEntry, name);               
+	}else{
+		S_ForwardIt(inFace, interest, pitEntry, name);
+	} // end of option p2                    
+}// End of if S
+
+void 
+AsfStrategy::Trace(const Face& inFace, const Interest& interest, const shared_ptr<pit::Entry>& pitEntry){
+	
+		int k = (-1)*interest.getName().size();                
+		// if it's a multipath interest check               
+		if (interest.getName().at(k+1).toUri()=="M"){
+			multi_process(inFace, interest, pitEntry);
+		}
+
+		if (interest.getName().at(k+1).toUri()=="S"){              
+			single_process(inFace, interest, pitEntry);       
+		} 
+	
+}
+
+
+void
 AsfStrategy::afterReceiveInterest(const Face& inFace, const Interest& interest,
                                   const shared_ptr<pit::Entry>& pitEntry)
 {
   // Should the Interest be suppressed?
-  RetxSuppressionResult suppressResult = m_retxSuppression.decidePerPitEntry(*pitEntry);
+  RetxSuppression::Result suppressResult = m_retxSuppression.decide(inFace, interest, *pitEntry);
 
   switch (suppressResult) {
-  case RetxSuppressionResult::NEW:
-  case RetxSuppressionResult::FORWARD:
+  case RetxSuppression::NEW:
+  case RetxSuppression::FORWARD:
     break;
-  case RetxSuppressionResult::SUPPRESS:
+  case RetxSuppression::SUPPRESS:
     NFD_LOG_DEBUG(interest << " from=" << inFace.getId() << " suppressed");
     return;
   }
 
+
+        std::size_t found3 = interest.getName().toUri().find("Key-TID");
+	std::size_t found2 = interest.getName().toUri().find("/Trace");
+	if ((found2!=std::string::npos)&&(found3!=std::string::npos)&&(inFace.getScope() == ndn::nfd::FACE_SCOPE_LOCAL)){
+                Trace(inFace, interest, pitEntry);
+                return;
+         }
+                 
+
   const fib::Entry& fibEntry = this->lookupFib(*pitEntry);
   const fib::NextHopList& nexthops = fibEntry.getNextHops();
 
@@ -97,8 +255,6 @@
     return;
   }
 
-  NFD_LOG_TRACE("Forwarding interest to face: " << faceToUse->getId());
-
   forwardInterest(interest, fibEntry, pitEntry, *faceToUse);
 
   // If necessary, send probe
@@ -125,17 +281,14 @@
   }
 
   // Record the RTT between the Interest out to Data in
-  FaceInfo* faceInfo = namespaceInfo->get(inFace.getId());
-  if (faceInfo == nullptr) {
-    return;
-  }
-  faceInfo->recordRtt(pitEntry, inFace);
+  FaceInfo& faceInfo = namespaceInfo->get(inFace.getId());
+  faceInfo.recordRtt(pitEntry, inFace);
 
   // Extend lifetime for measurements associated with Face
-  namespaceInfo->extendFaceInfoLifetime(*faceInfo, inFace);
+  namespaceInfo->extendFaceInfoLifetime(faceInfo, inFace);
 
-  if (faceInfo->isTimeoutScheduled()) {
-    faceInfo->cancelTimeoutEvent(data.getName());
+  if (faceInfo.isTimeoutScheduled()) {
+    faceInfo.cancelTimeoutEvent(data.getName());
   }
 }
 
@@ -246,8 +399,7 @@
   for (const fib::NextHop& hop : fibEntry.getNextHops()) {
     Face& hopFace = hop.getFace();
 
-    if ((hopFace.getId() == inFace.getId() && hopFace.getLinkType() != ndn::nfd::LINK_TYPE_AD_HOC) ||
-         wouldViolateScope(inFace, interest, hopFace)) {
+    if (hopFace.getId() == inFace.getId() || wouldViolateScope(inFace, interest, hopFace)) {
       continue;
     }
 
